# -*- coding: utf-8 -*-
"""deep_leaning_sklearn_diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A0XLxlgCduxy3ZqrfR_z4qPyVPRtgG0X
"""

#Base de dados retidado do kaggle

https://www.kaggle.com/uciml/pima-indians-diabetes-database

O codigo a seguir foi construito somente para demonstração de conhecimento sem nehum uso profissional.

The following code was created only to demonstrate knowledge without professional use.

El siguiente código fue creado solo para demostrar conocimiento sin uso profesional.

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

base = pd.read_csv('diabetes.csv')

base.shape

base.isnull().values.any()

base

base.info()

base.describe()

sns.countplot(x = 'Outcome', data = base);

base.hist(figsize=(20,12));

sns.pairplot(base, hue = 'Outcome', 
             vars = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']);

sns.heatmap(base.corr(), annot = True);

X = base.iloc[:, 0:8].values

X

y = base.iloc[:, 8].values

y

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

X

#https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

X_train.shape

X_test.shape

# https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html
from sklearn.neural_network import MLPClassifier
classifier = MLPClassifier(verbose = True,
                              max_iter=3000,
                              tol = 0.0000001,
                              solver = 'adam',
                              learning_rate_init=0.00001,
                              learning_rate='adaptive', 
                              alpha = 0.002,
                              hidden_layer_sizes=(400),
                              activation='relu',
                              batch_size=30)
classifier.fit(X_train, y_train)
forecasts = classifier.predict(X_test)

# https://scikit-learn.org/stable/auto_examples/neural_networks/plot_mlp_training_curves.html
loss_values = classifier.loss_curve_
print (loss_values)

from sklearn.metrics import confusion_matrix, accuracy_score
prev = accuracy_score(y_test, forecasts)
matrix = confusion_matrix(y_test, forecasts)

y_pred = classifier.predict(X_test)

y_pred

y_pred = (y_pred > 0.5)

y_pred

plt.plot(loss_values)
plt.title('Model Loss Progress During Training')
plt.xlabel('Epoch')
plt.ylabel('Training and Validation Loss')
plt.legend(['Loss']);

from sklearn.metrics import confusion_matrix
y_train_pred = classifier.predict(X_train)
y_train_pred = (y_train_pred > 0.5)
cm = confusion_matrix(y_train, y_train_pred)
sns.heatmap(cm, annot=True);

cm

from sklearn.metrics import classification_report
print(classification_report(y_train_pred, y_train))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True);

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))